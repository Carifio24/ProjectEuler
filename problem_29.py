####################################################
# Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

# 2^2=4, 2^3=8, 2^4=16, 2^5=32
# 3^2=9, 3^3=27, 3^4=81, 3^5=243
# 4^2=16, 4^3=64, 4^4=256, 4^5=1024
# 5^2=25, 5^3=125, 5^4=625, 5^5=3125
# If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

# How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
####################################################

# Obviously we could just brute-force this, via the two lines below
import itertools
print(len(set([a ** b for a, b in itertools.product(range(2,101), range(2,101))])))

# This runs really fast, so this probably isn't worth pursuing further.
# But if we were going to, here are what we'd want to think about

# Let f(a,b) = a^b
# If b = m * n, we then have that f(a,b) = f(a^m, n) = f(a^n, m)
# or, in our functional notation, f(a, m * n) = f(f(a,m), n)
# Call this identity 1

# We also note that f(m^n, b) = f(m, n * b)
# Call this identity 2

# We also have f(m * n, b) = f(m, b) * f(n, b)
# but this isn't as useful for identifying repeat values
# And of course f(1, x) = 1 for any x, but that's outside of our domain of interest

# Exploiting identities 1 and 2 to avoid repeating calculations seems like it would be the way to go